/*
 * Copyright (C) 2013 Jon
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.jonathansmith.javadpad.client.gui.dialogs;

import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import java.util.EventObject;
import java.util.concurrent.CopyOnWriteArrayList;

import javax.swing.GroupLayout;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.WindowConstants;

import net.jonathansmith.javadpad.common.events.ChangeListener;
import net.jonathansmith.javadpad.common.events.ChangeSender;
import net.jonathansmith.javadpad.common.events.gui.ModalCloseEvent;

/**
 *
 * @author Jon
 */
public class WaitForRecordsDialog extends JDialog implements ChangeSender {

    private final CopyOnWriteArrayList<ChangeListener> listeners;
    
    private boolean wasClosedProgrammatically = false;
    
    /**
     * Creates new form UserWaitDialog
     */
    public WaitForRecordsDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.listeners = new CopyOnWriteArrayList<ChangeListener> ();
        initComponents();
    }
    
    public void maskCloseEvent() {
        this.wasClosedProgrammatically = true;
    }

    @Override
    public void addListener(ChangeListener listener) {
        if (!this.listeners.contains(listener)) {
            this.listeners.add(listener);
        }
    }
    
    @Override
    public void removeListener(ChangeListener listener) {
        if (this.listeners.contains(listener)) {
            this.listeners.remove(listener);
        }
    }

    @Override
    public void fireChange(EventObject event) {
        for (ChangeListener listener : this.listeners) {
            listener.changeEventReceived(event);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        jProgressBar1 = new JProgressBar();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Waiting for server response...");
        setModal(true);
        setResizable(false);
        addWindowListener(new WindowAdapter() {
            public void windowClosed(WindowEvent evt) {
                WindownCloseHandler(evt);
            }
        });

        jLabel1.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Please wait for the server response...");

        jProgressBar1.setIndeterminate(true);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(jProgressBar1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(57, 57, 57))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void WindownCloseHandler(WindowEvent evt) {//GEN-FIRST:event_WindownCloseHandler
        if (!this.wasClosedProgrammatically) {
            this.fireChange(new ModalCloseEvent(this, true));
        }
    }//GEN-LAST:event_WindownCloseHandler

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel jLabel1;
    private JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables
}